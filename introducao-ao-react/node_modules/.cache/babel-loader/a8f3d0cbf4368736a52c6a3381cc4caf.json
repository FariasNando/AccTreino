{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GIT\\\\introducao-ao-react\\\\src\\\\components\\\\Textos.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst txtMain = \"Hello World\"; //Cria uma função com a data e hora \n\nfunction DataShow() {\n  const baseData = new Date().toLocaleString();\n  return baseData;\n} //Cria uma função com todos os estilos\n\n\n_c = DataShow;\n\nfunction ListWords(props) {\n  /*\r\n      Cada texto tem uma funcao onde tem o objetivo\r\n      de facilitar a manutenção do codigo\r\n  */\n  function txtNormal(txtShow) {\n    txtShow = txtMain;\n    return txtShow;\n  }\n\n  function txtUpperCase(txtShow) {\n    let rec = txtShow.toUpperCase();\n    return rec;\n  }\n\n  function txtLowerCase(txtShow) {\n    let rec = txtShow.toLowerCase();\n    return rec;\n  }\n\n  function txtInvertWorld(txtShow) {\n    let rec = txtShow.split('').reverse().join('');\n    return rec;\n  }\n\n  function txtChargeWorlds(txtShow) {\n    let rec = txtShow.split(\" \").reverse().join(\" \");\n    return rec;\n  }\n\n  function txtLowerAndUpperCase(txtShow) {\n    let rec = '';\n\n    for (let i = 0; i < txtShow.length; i++) {\n      if (i % 2 === 1) {\n        rec += txtShow.charAt(i).toLowerCase();\n      } else {\n        rec += txtShow.charAt(i).toUpperCase();\n      }\n    }\n\n    return rec;\n  }\n\n  function txtAdd(txtShow) {\n    let rec = \"Olá, esse é o sexto \" + txtShow.repeat(3).split('').reverse();\n    return rec;\n  }\n\n  function txtInvert(txtShow) {\n    let rec = txtShow.split(\" \").reverse().join(\" \").split(\"\").reverse().join(\"\");\n    return rec;\n  }\n\n  function txtSpaced(txtShow) {\n    let rec = txtShow.split(\"\").join(\"  \") + DataShow();\n    return rec;\n  }\n\n  function txtArrow(txtShow) {\n    let rec = txtShow.split(\"\").join(\" → \") + DataShow();\n    return rec;\n  } //Cria o array com todos os dados\n\n\n  const WorldsArray = [txtNormal(props.text) + \" \" + DataShow(), txtUpperCase(props.name) + \" \" + DataShow(), txtLowerCase(props.name) + \" \" + DataShow(), txtInvertWorld(props.name) + \" \" + DataShow(), txtChargeWorlds(props.name) + \" \" + DataShow(), txtLowerAndUpperCase(props.name) + \" \" + DataShow(), txtAdd(props.name) + \"  \" + DataShow(), txtInvert(props.name) + \" \" + DataShow(), txtSpaced(props.name) + \" \" + DataShow(), txtArrow(props.name) + \" \" + DataShow()]; //Cria o map do array e estrutura a base\n\n  const items = WorldsArray.map((data, index) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"dir\", {\n    id: \"showList\",\n    children: items\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = ListWords;\nexport default ListWords;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataShow\");\n$RefreshReg$(_c2, \"ListWords\");","map":{"version":3,"sources":["C:/Users/User/Documents/GIT/introducao-ao-react/src/components/Textos.js"],"names":["React","txtMain","DataShow","baseData","Date","toLocaleString","ListWords","props","txtNormal","txtShow","txtUpperCase","rec","toUpperCase","txtLowerCase","toLowerCase","txtInvertWorld","split","reverse","join","txtChargeWorlds","txtLowerAndUpperCase","i","length","charAt","txtAdd","repeat","txtInvert","txtSpaced","txtArrow","WorldsArray","text","name","items","map","data","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst txtMain = \"Hello World\"\r\n//Cria uma função com a data e hora \r\nfunction DataShow() {\r\n    const baseData = new Date().toLocaleString();\r\n    return baseData;\r\n}\r\n//Cria uma função com todos os estilos\r\nfunction ListWords(props) {\r\n    /*\r\n        Cada texto tem uma funcao onde tem o objetivo\r\n        de facilitar a manutenção do codigo\r\n    */\r\n    function txtNormal(txtShow) {\r\n        txtShow = txtMain\r\n        return txtShow;\r\n    }\r\n    function txtUpperCase(txtShow) {\r\n        let rec = txtShow.toUpperCase();\r\n        return rec\r\n    }\r\n    function txtLowerCase(txtShow) {\r\n        let rec = txtShow.toLowerCase();\r\n        return rec\r\n    }\r\n    function txtInvertWorld(txtShow) {\r\n        let rec = txtShow.split('').reverse().join('');\r\n        return rec\r\n    }\r\n    function txtChargeWorlds(txtShow) {\r\n        let rec = txtShow.split(\" \").reverse().join(\" \");\r\n        return rec\r\n    }\r\n    function txtLowerAndUpperCase(txtShow) {\r\n        let rec = '';\r\n        for (let i = 0; i < txtShow.length; i++) {\r\n            if (i % 2 === 1) {\r\n                rec += txtShow.charAt(i).toLowerCase();\r\n            } else {\r\n                rec += txtShow.charAt(i).toUpperCase();\r\n            }\r\n        }\r\n        return rec;\r\n    }\r\n    function txtAdd(txtShow) {\r\n        let rec = \"Olá, esse é o sexto \" + txtShow.repeat(3).split('').reverse();\r\n        return rec\r\n    }\r\n    function txtInvert(txtShow) {\r\n        let rec = txtShow.split(\" \").reverse().join(\" \").split(\"\").reverse().join(\"\");\r\n        return rec\r\n    }\r\n    function txtSpaced(txtShow) {\r\n        let rec = txtShow.split(\"\").join(\"  \") + DataShow();\r\n        return rec\r\n    }\r\n    function txtArrow(txtShow) {\r\n        let rec = txtShow.split(\"\").join(\" → \") +  DataShow();\r\n        return rec\r\n    }\r\n    //Cria o array com todos os dados\r\n    const WorldsArray = [\r\n        txtNormal(props.text) + \" \" + DataShow(),\r\n        txtUpperCase(props.name) + \" \" + DataShow(),\r\n        txtLowerCase(props.name) + \" \" + DataShow(),\r\n        txtInvertWorld(props.name) + \" \" + DataShow(),\r\n        txtChargeWorlds(props.name) + \" \" + DataShow(),\r\n        txtLowerAndUpperCase(props.name) + \" \" + DataShow(),\r\n        txtAdd(props.name) + \"  \" + DataShow(),\r\n        txtInvert(props.name) + \" \" + DataShow(),\r\n        txtSpaced(props.name) + \" \" + DataShow(),\r\n        txtArrow(props.name) + \" \" + DataShow()\r\n    ]\r\n    //Cria o map do array e estrutura a base\r\n    const items = WorldsArray.map((data, index) => {\r\n        return <p key={index}>{data}</p>\r\n    })\r\n    return (\r\n        <dir id=\"showList\">\r\n            {items}\r\n        </dir>\r\n    )\r\n}\r\n\r\nexport default ListWords\r\n"]},"metadata":{},"sourceType":"module"}