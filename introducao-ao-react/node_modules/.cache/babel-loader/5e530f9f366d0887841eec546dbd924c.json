{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GIT\\\\introducao-ao-react\\\\src\\\\components\\\\Textos.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inicialTxt = \"Hello World!\"; //Função com a data\n\nfunction DateSet() {\n  const date = new Date();\n  const dia = date.getDate();\n  const mes = date.getMonth() + 1;\n  const ano = date.getFullYear();\n  const fullDate = dia + '/' + mes + '/' + ano;\n  return fullDate;\n} //Função com os tipos de textos\n\n\n_c = DateSet;\n\nfunction ListaTexto(props) {\n  function txtNormal(t) {\n    t = inicialTxt;\n    return t;\n  }\n\n  function txtUpperCase(t) {\n    const newT = t.toUpperCase();\n    return newT;\n  }\n\n  function txtLowerCase(t) {\n    const newT = t.toLowerCase();\n    return newT;\n  }\n\n  function txtReverseWorld(t) {\n    const newT = t.split('').reverse().join('');\n    return newT;\n  }\n\n  function txtChargeWorlds(t) {\n    const newT = t.split(\" \").reverse().join(\" \");\n    return newT;\n  }\n\n  function txtLowerAndUpperCase(t) {\n    let newT = '';\n\n    for (let i = 0; i < t.length; i++) {\n      if (i % 2 == 0) {\n        newT += t.charAt(i).toLowerCase();\n      } else {\n        newT += t.charAt(i).toUpperCase();\n      }\n    }\n\n    return newT;\n  }\n\n  function txtRepReverse(t) {\n    const newT = t.repeat(2).split('').reverse();\n    return newT;\n  }\n\n  function txtReverse(t) {\n    const newT = t.split(\" \").reverse().join(\" \").split(\"\").reverse().join(\"\");\n    return newT;\n  }\n\n  function txtSpace(t) {\n    const newT = t.split(\"\").join(\"  \") + DateSet();\n    return newT;\n  }\n\n  function txtArrow(t) {\n    let newT = t.split('').reverse().join('-').replace(' ', '') + DateSet();\n    return newT;\n  }\n\n  const TextsArray = [txtNormal(props.text) + \" \" + DateSet(), txtUpperCase(props.name) + \" \" + DateSet(), txtLowerCase(props.name) + \" \" + DateSet(), txtReverseWorld(props.name) + \" \" + DateSet(), txtChargeWorlds(props.name) + \" \" + DateSet(), txtLowerAndUpperCase(props.name) + \" \" + DateSet(), txtRepReverse(props.name) + \"  \" + DateSet(), txtReverse(props.name) + \" \" + DateSet(), txtSpace(props.name) + \" \" + DateSet(), txtArrow(props.name) + \" \" + DateSet()];\n  const itens = TextsArray.map((data, index) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"dir\", {\n    id: \"showList\",\n    children: itens\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = ListaTexto;\nexport default ListaTexto;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DateSet\");\n$RefreshReg$(_c2, \"ListaTexto\");","map":{"version":3,"sources":["C:/Users/User/Documents/GIT/introducao-ao-react/src/components/Textos.js"],"names":["React","inicialTxt","DateSet","date","Date","dia","getDate","mes","getMonth","ano","getFullYear","fullDate","ListaTexto","props","txtNormal","t","txtUpperCase","newT","toUpperCase","txtLowerCase","toLowerCase","txtReverseWorld","split","reverse","join","txtChargeWorlds","txtLowerAndUpperCase","i","length","charAt","txtRepReverse","repeat","txtReverse","txtSpace","txtArrow","replace","TextsArray","text","name","itens","map","data","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst inicialTxt = \"Hello World!\"\r\n//Função com a data\r\nfunction DateSet() {\r\n    const date = new Date();\r\n    const dia = date.getDate();\r\n    const mes = date.getMonth() + 1;\r\n    const ano = date.getFullYear();    \r\n    const fullDate = dia + '/' + mes + '/' + ano;\r\n    return fullDate;\r\n}\r\n//Função com os tipos de textos\r\nfunction ListaTexto(props) {\r\n   \r\n    function txtNormal(t) {\r\n        t = inicialTxt\r\n        return t;\r\n    }    \r\n\r\n    function txtUpperCase(t) {\r\n        const newT = t.toUpperCase();\r\n        return newT\r\n    }\r\n\r\n    function txtLowerCase(t) {\r\n        const newT = t.toLowerCase();\r\n        return newT\r\n    }\r\n\r\n    function txtReverseWorld(t) {\r\n        const newT = t.split('').reverse().join('');\r\n        return newT\r\n    }\r\n\r\n    function txtChargeWorlds(t) {\r\n        const newT = t.split(\" \").reverse().join(\" \");\r\n        return newT\r\n    }\r\n\r\n    function txtLowerAndUpperCase(t) {\r\n        let newT = '';\r\n        for (let i = 0; i < t.length; i++) {\r\n            if (i % 2 == 0) {\r\n                newT += t.charAt(i).toLowerCase();\r\n            } else {\r\n                newT += t.charAt(i).toUpperCase();\r\n            }\r\n        }\r\n        return newT;\r\n    }\r\n    \r\n    function txtRepReverse(t) {\r\n        const newT = t.repeat(2).split('').reverse();\r\n        return newT\r\n    }\r\n\r\n    function txtReverse(t) {\r\n        const newT = t.split(\" \").reverse().join(\" \").split(\"\").reverse().join(\"\");\r\n        return newT\r\n    }\r\n\r\n    function txtSpace(t) {\r\n        const newT = t.split(\"\").join(\"  \") + DateSet();\r\n        return newT\r\n    }\r\n\r\n    function txtArrow(t) {\r\n        let newT = t.split('').reverse().join('-').replace(' ', '') + DateSet();\r\n        return newT\r\n    }\r\n \r\n    const TextsArray = [\r\n        txtNormal(props.text) + \" \" + DateSet(),\r\n        txtUpperCase(props.name) + \" \" + DateSet(),\r\n        txtLowerCase(props.name) + \" \" + DateSet(),\r\n        txtReverseWorld(props.name) + \" \" + DateSet(),\r\n        txtChargeWorlds(props.name) + \" \" + DateSet(),\r\n        txtLowerAndUpperCase(props.name) + \" \" + DateSet(),\r\n        txtRepReverse(props.name) + \"  \" + DateSet(),\r\n        txtReverse(props.name) + \" \" + DateSet(),\r\n        txtSpace(props.name) + \" \" + DateSet(),\r\n        txtArrow(props.name) + \" \" + DateSet()\r\n    ]\r\n   \r\n    const itens = TextsArray.map((data, index) => {\r\n        return <p key={index}>{data}</p>\r\n    })\r\n    return (\r\n        <dir id=\"showList\">\r\n            {itens}\r\n        </dir>\r\n    )\r\n}\r\n\r\nexport default ListaTexto\r\n"]},"metadata":{},"sourceType":"module"}